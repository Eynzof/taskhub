import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../store'
import {fetchCount} from "../counter/counterAPI";
import {fetchTodo} from "./todoAPI";
import {counterSlice} from "../counter/counterSlice";

export interface TodoState {
  todos: object
  status: 'idle' | 'loading' | 'failed'
}

const initialState: TodoState = {
  todos: [
    {
      "id": 1,
      "todo": "Do something nice for someone I care about",
      "completed": true,
      "userId": 26
    }
  ],
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetch = createAsyncThunk(
  'todo/fetchTodo',
  async () => {
    const response = await fetchTodo()
    // The value we return becomes the `fulfilled` action payload
    // @ts-ignore
    return response.todos
  }
)

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetch.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetch.fulfilled, (state, action) => {
        state.status = 'idle'
        state.todos = action.payload
      })
  },
})


export const selectTodo = (state: AppState) => state.todo.todos

export default todoSlice.reducer